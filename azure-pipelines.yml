# Deploy piggymetrics to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'ee9a5046-aa3b-4a81-ac5d-3a0c6603dd75'
  - task: replacetokens@3
  inputs:
    rootDirectory: 'kubernetes/*'
    targetFiles: 'kubernetes/*.yaml'
    encoding: 'auto'
    writeBOM: true
    actionOnMissing: 'warn'
    keepToken: false
    tokenPrefix: '${'
    tokenSuffix: '}'
    emptyValue: '$(containerRegistry)': 'javademosregistry.azurecr.io'
  imagePullSecret: 'javademosregistry4921c2ff-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'
  

stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - publish: kubernetes
      artifact: kubernetes

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'Piggymetrics.piggymetrics-azp'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: AzureKeyVault@1
            displayName: Fetch secrets from Azure Key vault
            inputs:
              azureSubscription: 'Java Demos 2'
              KeyVaultName: 'piggymetrics'
              SecretsFilter: '*'
          
          - task: replacetokens@3
            inputs:
              rootDirectory: '$(Pipeline.Workspace)/kubernetes/'
              targetFiles: '*.yaml'
              encoding: 'auto'
              writeBOM: true
              actionOnMissing: 'warn'
              keepToken: false
              tokenPrefix: '${'
              tokenSuffix: '}'
              emptyValue: '$(containerRegistry)'

          - task: KubernetesManifest@0
            displayName: Create generic secrets to be available on pods
            inputs:
              action: 'createSecret'
              secretType: 'generic'
              secretName: 'piggymetrics'
              secretArguments: '--from-literal=config_service_password=$(CONFIG-SERVICE-PASSWORD) --from-literal=notification_service_password=$(NOTIFICATION-SERVICE-PASSWORD) --from-literal=statistics_service_password=$(STATISTICS-SERVICE-PASSWORD) --from-literal=account_service_password=$(ACCOUNT-SERVICE-PASSWORD) --from-literal=rabbitmq_password=$(RABBITMQ-PASSWORD) --from-literal=mongodb_uri=$(MONGODB-URI)  --from-literal=mongodb_database=$(MONGODB-DATABASE) --from-literal=rabbitmq_username=$(RABBITMQ-USERNAME) --from-literal=rabbitmq_host=$(RABBITMQ-HOST) --from-literal=rabbitmq_port=$(RABBITMQ-PORT)  --from-literal=notification_email_user=$(SMTP-USER) --from-literal=notification_email_pass=$(SMTP-PASSWORD)'
              
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/kubernetes/1-config.yaml
                $(Pipeline.Workspace)/kubernetes/2-registry.yaml
                $(Pipeline.Workspace)/kubernetes/3-gateway.yaml
                $(Pipeline.Workspace)/kubernetes/4-auth-service.yaml
                $(Pipeline.Workspace)/kubernetes/5-account-service.yaml
                $(Pipeline.Workspace)/kubernetes/6-statistics-service.yaml
                $(Pipeline.Workspace)/kubernetes/7-notification-service.yaml
              imagePullSecrets: |
                $(imagePullSecret)